from __future__ import annotations  # Let classes use themselves in type annotations

from typing import TYPE_CHECKING

from sqlalchemy import Column, Float, ForeignKey, String
from sqlalchemy.orm import relationship

from aana.configs.db import IdSqlType, id_type
from aana.models.db.base import BaseModel, TimeStampEntity

if TYPE_CHECKING:
    from aana.models.pydantic.asr_output import (
        AsrSegments,
        AsrTranscription,
        AsrTranscriptionInfo,
    )


class TranscriptEntity(BaseModel, TimeStampEntity):
    """ORM class for media transcripts generated by a model."""

    __tablename__ = "transcripts"

    id = Column(IdSqlType, primary_key=True)  # noqa: A003
    model = Column(String, comment="Name of model used to generate transcript")
    media_id = Column(
        IdSqlType, ForeignKey("media.id"), comment="Foreign key to media table"
    )
    transcript = Column(String, comment="Full text transcript of media")
    segments = Column(String, comment="Segments of the transcript")
    language = Column(
        String, comment="Language of the transcript as predicted by model"
    )
    language_confidence = Column(
        Float, comment="Confidence score of language prediction"
    )

    media = relationship("MediaEntity", back_populates="transcripts")

    @classmethod
    def from_asr_output(
        cls,
        model_name: str,
        media_id: id_type,
        info: AsrTranscriptionInfo,
        transcription: AsrTranscription,
        segments: AsrSegments,
    ) -> TranscriptEntity:
        """Converts an AsrTranscriptionInfo and AsrTranscription to a single Transcript entity."""
        return TranscriptEntity(
            model=model_name,
            media_id=media_id,
            language=info.language,
            language_confidence=info.language_confidence,
            transcript=transcription.text,
            segments=segments.json(),
        )
